services:

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: VerySecretPassword1986
      MONGO_INITDB_DATABASE: job-track
    volumes:
      - mongodb_data:/data/db

#  faiss-api:
#    image: faiss-faiss-api:latest
#    container_name: faiss-api
#    ports:
#      - "8001:8001"
#    volumes:
#      - ./faiss_data:/app/faiss_data
#      - /home/deploy/faiss/app:/app
#    environment:
#      - PYTHONUNBUFFERED=1
#    restart: always
#    networks:
#      - dev_network

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: start-dev
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak
      - KC_HOSTNAME=localhost
    ports:
      - "8085:8080"
    depends_on:
      - postgres

  postgres:
    image: postgres:latest
    container_name: keycloak-db
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=keycloak
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U keycloak -d keycloak" ]
      interval: 5s
      timeout: 5s
      retries: 5

  umami:
    image: ghcr.io/umami-software/umami:postgresql-latest
    container_name: umami
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: postgresql://umami:superUmami!123@postgres-db:5432/umami
      DATABASE_TYPE: postgresql
      APP_SECRET: superUmami!123
    depends_on:
      postgres:
        condition: service_healthy
    init: true
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl http://localhost:3000/api/heartbeat" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - dev_network

  telegram-bot:
    image: telegram-bot
    environment:
      - TELEGRAM_BOT_TOKEN=7847725003:AAGapLlYlCXDYaY01R6xXFsTBNFh0hPH1Q8
    restart: unless-stopped
    networks:
      - dev_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-kraft
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kraft-data:/tmp/kraft-combined-logs
    networks:
      - dev_network

volumes:
  kraft-data:
    driver: local
  mongodb_data:
    driver: local
  postgres_data:
    driver: local
networks:
  dev_network:
    driver: bridge
