package co.uk.offerland.job_track.config;import javax.sql.DataSource;import java.util.Arrays;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import co.uk.offerland.job_track.infrastructure.ai.RAGAssistant;import dev.langchain4j.data.segment.TextSegment;import dev.langchain4j.memory.chat.MessageWindowChatMemory;import dev.langchain4j.model.embedding.EmbeddingModel;import dev.langchain4j.model.openai.OpenAiEmbeddingModel;import dev.langchain4j.model.openai.OpenAiStreamingChatModel;import dev.langchain4j.rag.DefaultRetrievalAugmentor;import dev.langchain4j.rag.RetrievalAugmentor;import dev.langchain4j.rag.content.injector.DefaultContentInjector;import dev.langchain4j.rag.content.retriever.EmbeddingStoreContentRetriever;import dev.langchain4j.service.AiServices;import dev.langchain4j.store.embedding.EmbeddingStore;import dev.langchain4j.store.embedding.pgvector.PgVectorEmbeddingStore;@Configurationpublic class AIConfig {    double confidenceThreshold = 0.80;    private String OPENAI_API_KEY =        "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";    @Bean    public OpenAiStreamingChatModel chatLanguageModel() {        return OpenAiStreamingChatModel.builder()            .modelName("gpt-4o-mini")            .apiKey(OPENAI_API_KEY)            .responseFormat("json_object")            .strictJsonSchema(false)            .build();    }    @Bean    public StreamingAssistant streamingAssistant() {        return AiServices.builder(StreamingAssistant.class)            .streamingChatLanguageModel(chatLanguageModel())            .chatMemoryProvider(memoryId -> MessageWindowChatMemory.withMaxMessages(10))            .build();    }    @Bean    public EmbeddingModel embeddingModel() {        return OpenAiEmbeddingModel.builder()            .apiKey(OPENAI_API_KEY)            .modelName("text-embedding-ada-002")            .build();    }    @Autowired    private DataSource dataSource;    @Bean    public EmbeddingStore<TextSegment> embeddingStore() {        return PgVectorEmbeddingStore.datasourceBuilder()            .datasource(dataSource)       // Injected DataSource from Spring Boot            .table("embeddings")          // Set the table name            .dimension(1536)              // Adjust based on your embedding model            .useIndex(true)               // Enable ivfflat index for fast searching            .indexListSize(100)           // Adjust based on dataset size            .createTable(true)            // Auto-create table if it doesnâ€™t exist            .dropTableFirst(false)        // Avoid dropping data            .build();    }    @Bean    public RAGAssistant ragAssistant() {        var contentRetriever = EmbeddingStoreContentRetriever.builder()            .embeddingStore(embeddingStore())            .embeddingModel(embeddingModel())            .minScore(confidenceThreshold)            .build();        var contentInjector = DefaultContentInjector.builder()            .metadataKeysToInclude(Arrays.asList("file_name", "index"))            .build();        RetrievalAugmentor retrievalAugmentor = DefaultRetrievalAugmentor.builder()            .contentRetriever(contentRetriever)            .contentInjector(contentInjector)            .build();        return AiServices.builder(RAGAssistant.class)            .streamingChatLanguageModel(chatLanguageModel())            .retrievalAugmentor(retrievalAugmentor)            .chatMemoryProvider(memoryId -> MessageWindowChatMemory.withMaxMessages(10))            .build();    }}