package co.uk.offerland.job_track.config;import co.uk.offerland.job_track.infrastructure.ai.RAGAssistant;import dev.langchain4j.memory.chat.MessageWindowChatMemory;import dev.langchain4j.model.openai.OpenAiStreamingChatModel;import dev.langchain4j.rag.DefaultRetrievalAugmentor;import dev.langchain4j.rag.RetrievalAugmentor;import dev.langchain4j.rag.content.injector.DefaultContentInjector;import dev.langchain4j.rag.content.retriever.EmbeddingStoreContentRetriever;import dev.langchain4j.service.AiServices;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import java.util.Arrays;@Configurationpublic class AIConfig {    public static final double CONFIDENCE_THRESHOLD = 0.97;    @Value("${open.api.key}")    private String openApiKey;    @Bean    public OpenAiStreamingChatModel chatLanguageModel() {        return OpenAiStreamingChatModel.builder()                .modelName("gpt-4o-mini")                .apiKey(openApiKey)                .responseFormat("json_object")                .strictJsonSchema(false)                .build();    }    @Bean    public StreamingAssistant streamingAssistant() {        return AiServices.builder(StreamingAssistant.class)                .streamingChatLanguageModel(chatLanguageModel())                .chatMemoryProvider(memoryId -> MessageWindowChatMemory.withMaxMessages(10))                .build();    }    @Bean    public RAGAssistant ragAssistant() {        return AiServices.builder(RAGAssistant.class)                .streamingChatLanguageModel(chatLanguageModel())                .chatMemoryProvider(memoryId -> MessageWindowChatMemory.withMaxMessages(10))                .build();    }}