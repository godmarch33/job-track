//package co.uk.offerland.job_track.config;////import io.r2dbc.pool.ConnectionPool;//import io.r2dbc.pool.ConnectionPoolConfiguration;//import io.r2dbc.postgresql.PostgresqlConnectionConfiguration;//import io.r2dbc.postgresql.PostgresqlConnectionFactory;//import io.r2dbc.spi.ConnectionFactory;//import org.springframework.beans.factory.annotation.Value;//import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;//import org.springframework.context.annotation.Bean;//import org.springframework.context.annotation.Configuration;//import org.springframework.context.annotation.Import;//import org.springframework.data.r2dbc.config.EnableR2dbcAuditing;//import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;////import java.time.Duration;////@EnableR2dbcAuditing//@Configuration//@Import(DataSourceAutoConfiguration.class)//@EnableR2dbcRepositories(basePackages = "co.uk.offerland.job_track.infrastructure.persistence.r2dbc")//public class PersistenceConfig {////////    @Value("${spring.r2dbc.host}")////    private String host;////    @Value("${spring.r2dbc.port}")////    private int port;////    @Value("${spring.r2dbc.username}")////    private String username;////    @Value("${spring.r2dbc.password}")////    private String password;////    @Value("${spring.r2dbc.database}")////    private String database;////    @Value("${spring.r2dbc.pool.initial-size}")////    private int initialSize;////    @Value("${spring.r2dbc.pool.max-size}")////    private int maxSize;////////    @Bean////    public ConnectionFactory connectionFactory() {////////        PostgresqlConnectionConfiguration connectionConfiguration = PostgresqlConnectionConfiguration.builder()////                .host(host)////                .port(port)////                .username(username)////                .password(password)////                .database(database)////                .build();////////        PostgresqlConnectionFactory connectionFactory = new PostgresqlConnectionFactory(connectionConfiguration);////        ConnectionPoolConfiguration poolConfiguration = ConnectionPoolConfiguration.builder(connectionFactory)////                .maxIdleTime(Duration.ofMinutes(30))////                .maxLifeTime(Duration.ofHours(1))////                .maxAcquireTime(Duration.ofSeconds(30))////                .maxCreateConnectionTime(Duration.ofSeconds(10))////                .initialSize(initialSize)////                .maxSize(maxSize)////                .build();////////        return new ConnectionPool(poolConfiguration);////    }//}