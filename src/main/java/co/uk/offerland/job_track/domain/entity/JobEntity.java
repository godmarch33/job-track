//package co.uk.offerland.job_track.domain.entity;////import lombok.Data;//import lombok.EqualsAndHashCode;//import lombok.ToString;//import org.springframework.data.annotation.Id;//import org.springframework.data.annotation.LastModifiedDate;//import org.springframework.data.annotation.Reference;//import org.springframework.data.relational.core.mapping.Column;//import org.springframework.data.relational.core.mapping.Table;////import java.time.Instant;//import java.util.ArrayList;//import java.util.Arrays;//import java.util.List;//import java.util.UUID;////@Data//@EqualsAndHashCode//@Table(name = "jobs")//@ToString(exclude = {"phases"})//public class  JobEntity {////    @Id//    @Column("id")//    private UUID id;////    @Reference//    @Column("user_id")//    private UUID userId;////    @Column("company")//    private String company;////    @Column("title")//    private String title;////    @Column("location")//    private String location;////    @Column("link")//    private String link;////    @Column("company_logo")//    private String companyLogo;////    @Column("notes")//    private String notes;////    private List<JobPhaseEntity> phases = new ArrayList<>();////    @Column("phase_name")//    private List<String> availablePhases = new ArrayList<>();////    @Column("description")//    private String description;////    @Column("salary")//    private String salary;////    @Column("created_at")//    private Instant createdAt;////    @Column("updated_at")//    @LastModifiedDate//    private Instant updatedAt;////    public JobEntity() {//        initializeAvailablePhases();//    }////    private void initializeAvailablePhases() {//        this.availablePhases = Arrays.stream(JobPhase.values())//            .filter(e -> !e.getLabel().equals("Saved"))//            .filter(e -> !e.getLabel().equals("Applied"))//            .map(JobPhase::getLabel)//            .toList();//    }////    public JobPhaseEntity currentPhase() {//        return phases.stream()//            .filter(e -> e.getStatus() == JobPhaseStatus.IN_PROGRESS)//            .findAny()//            .orElseThrow(() -> new IllegalStateException("incorrect state phases entity"));//    }////    public void removeAvailablePhase(String phaseName) {//        availablePhases.remove(phaseName);//    }////    public void addPhase(JobPhaseEntity phase) {//        this.phases.add(phase);//        removeAvailablePhase(phase.getPhaseName());//    }////    public JobPhaseEntity nextPhase() {//        int orderIndex = currentPhase().getOrderIndex();////        return phases.stream()//            .filter(e -> e.getOrderIndex() == orderIndex + 1)//            .findFirst()//            .orElseThrow(() -> new IllegalStateException("No next phase found"));//    }//}