package co.uk.offerland.job_track.application.usecases.phase;import co.uk.offerland.job_track.application.dto.phase.ListPhaseResponse;import co.uk.offerland.job_track.infrastructure.persistence.UserRepository;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import reactor.core.publisher.Mono;import java.util.UUID;@Slf4j@Service@RequiredArgsConstructorpublic class AvailablePhasesUseCase {    private final UserRepository userRepository;    public Mono<ListPhaseResponse> listAvailablePhases(UUID userId, UUID jobId) {        return userRepository.findByUserId(userId)                .flatMap(user -> user.getJobs().stream()                        .filter(job -> job.getJobId().equals(jobId))                        .findFirst()                        .map(job -> {                            log.info("Retrieved available phases [{}] for jobId: [{}] and userId: [{}]",                                    job.getAvailablePhases(), jobId, userId);                            return Mono.just(new ListPhaseResponse(job.getAvailablePhases()));                        }).orElseGet(Mono::empty) // Return empty if no job is found                );    }}