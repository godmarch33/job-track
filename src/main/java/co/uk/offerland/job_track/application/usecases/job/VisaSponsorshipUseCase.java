package co.uk.offerland.job_track.application.usecases.job;import co.uk.offerland.job_track.application.dto.CompanyJobTitleDetailsRequest;import co.uk.offerland.job_track.application.dto.CompanyVisaSponsorshipDto;import co.uk.offerland.job_track.application.dto.SearchVisaResponse;import co.uk.offerland.job_track.infrastructure.converter.SearchVisaResponseConverter;import com.github.benmanes.caffeine.cache.Cache;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import reactor.core.publisher.Mono;@Slf4j@Service@AllArgsConstructorpublic class VisaSponsorshipUseCase {    private static final double TOLERANCE = 0.000001;    private final Cache<String, CompanyVisaSponsorshipDto> localCache;    private final SearchVisaService searchVisaService;    private final SearchVisaResponseConverter searchVisaResponseConverter;    public Mono<CompanyVisaSponsorshipDto> searchVisa(CompanyJobTitleDetailsRequest request) {        String company = request.company().replaceAll("\\(remote\\)", "").trim();;        String location = request.location();        String cacheKey = company + "_" + location;        var cachedValue = localCache.getIfPresent(cacheKey);        if (cachedValue != null) {            return Mono.just(cachedValue);        }        return searchVisaService.search(String.format("%s %s", company, location))                .map(this::handleVisaResponse)                .map(result -> searchVisaResponseConverter.toDto(company, location, result))                .doOnNext(dto -> localCache.put(cacheKey, dto))                .defaultIfEmpty(CompanyVisaSponsorshipDto.DEFAULT_VALUE);    }    private String handleVisaResponse(SearchVisaResponse result) {        log.info("handleVisaResponse: {}", result);        return result.distance() < 0.71d ? "Licensed Sponsor" : "";    }}