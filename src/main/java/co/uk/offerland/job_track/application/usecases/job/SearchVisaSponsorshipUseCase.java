package co.uk.offerland.job_track.application.usecases.job;import java.util.UUID;import org.springframework.stereotype.Service;import com.fasterxml.jackson.databind.ObjectMapper;import com.github.benmanes.caffeine.cache.Cache;import co.uk.offerland.job_track.application.dto.CompanyJobTitleDetailsRequest;import co.uk.offerland.job_track.application.dto.CompanyVisaSponsorship;import co.uk.offerland.job_track.infrastructure.ai.RAGAssistant;import co.uk.offerland.job_track.infrastructure.persistence.r2dbc.CompanyVisaSponsorshipR2dbcRepository;import jakarta.transaction.Transactional;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import reactor.core.publisher.Mono;import reactor.core.publisher.Sinks;@Slf4j@Service@AllArgsConstructorpublic class SearchVisaSponsorshipUseCase {    private final ObjectMapper objectMapper;    private final RAGAssistant ragAssistant;    private final Cache<String, CompanyVisaSponsorship> localCache;    private final CompanyVisaSponsorshipR2dbcRepository companyJobTitleDetailsR2dbcRepository;    @Transactional    public Mono<CompanyVisaSponsorship> saveToDatabase(CompanyVisaSponsorship entity) {        return companyJobTitleDetailsR2dbcRepository.save(entity);    }    public Mono<CompanyVisaSponsorship> getCompanyJobTitleResponse(CompanyJobTitleDetailsRequest request) {        String jobTitle = request.jobTitle();        String company = request.company();        String location = request.location();        String cacheKey = company + "_" + location;        var cachedValue = localCache.getIfPresent(cacheKey);        if (cachedValue != null) {            return Mono.just(cachedValue);        }        return companyJobTitleDetailsR2dbcRepository.findByCompanyAndLocation(company, location)            .switchIfEmpty(                fetchVisaSponsorship(company, location, jobTitle)                    .filter(entity -> isValidVisaSponsorshipEntity(entity))                    .flatMap(this::saveToDatabase)                    .doOnNext(entity -> localCache.put(cacheKey, entity))            ).defaultIfEmpty(CompanyVisaSponsorship.DEFAULT_VALUE);    }    private Mono<CompanyVisaSponsorship> fetchVisaSponsorship(String company, String location, String jobTitle) {        Sinks.Many<String> sink = Sinks.many().unicast().onBackpressureBuffer();        String userPrompt = String.format("company:%s, job title:%s, location:%s", company, jobTitle, location);        log.info("User Prompt {}", userPrompt);        ragAssistant.findCompany(UUID.randomUUID(), userPrompt)            .onPartialResponse(sink::tryEmitNext)            .onCompleteResponse(response -> sink.tryEmitComplete())            .onError(sink::tryEmitError)            .start();        return sink.asFlux()            .collectList()            .map(parts -> String.join("", parts))            .map(this::transformToCompanyJobTitleDetails)            .filter(this::isValidVisaSponsorshipEntity)            .flatMap(entity -> ensureIdBeforeSaving(entity, company, location))            .doOnError(error -> log.error("Error in fetchVisaSponsorship stream", error));    }    private CompanyVisaSponsorship transformToCompanyJobTitleDetails(String jsonResponse) {        try {            log.info("AI assistant response: [{}]", jsonResponse);            String ObjectResponse = jsonResponse.replaceAll("```json", "").replaceAll("```", "").trim();            return (CompanyVisaSponsorship) objectMapper.readValue(ObjectResponse, CompanyVisaSponsorship.class);        } catch (Exception ex) {            log.warn("ERROR!!! {}", jsonResponse);            return new CompanyVisaSponsorship();        }    }    private boolean isValidVisaSponsorshipEntity(CompanyVisaSponsorship entity) {        return entity != null &&               entity.getCompany() != null &&               entity.getLocation() != null &&               entity.getVisaSponsorship() != null;    }    private Mono<CompanyVisaSponsorship> ensureIdBeforeSaving(CompanyVisaSponsorship entity,                                                              String company,                                                              String location) {        entity.setId(UUID.randomUUID());        entity.setCompany(company);        entity.setLocation(location);        return Mono.just(entity);    }}