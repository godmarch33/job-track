//package co.uk.offerland.job_track.application.usecases.job;////import co.uk.offerland.job_track.application.dto.CompanyJobTitleDetailsRequest;//import co.uk.offerland.job_track.application.dto.CompanyVisaSponsorshipDto;//import co.uk.offerland.job_track.domain.entity.CompanyVisaSponsorshipEntity;//import co.uk.offerland.job_track.infrastructure.ai.RAGAssistant;//import co.uk.offerland.job_track.infrastructure.converter.CompanyVisaSponsorshipEntityConverter;//import co.uk.offerland.job_track.infrastructure.persistence.r2dbc.CompanyVisaSponsorshipR2dbcRepository;//import com.fasterxml.jackson.databind.JsonNode;//import com.fasterxml.jackson.databind.ObjectMapper;//import com.github.benmanes.caffeine.cache.Cache;//import lombok.AllArgsConstructor;//import lombok.extern.slf4j.Slf4j;//import org.springframework.stereotype.Service;//import reactor.core.publisher.Mono;//import reactor.core.publisher.Sinks;////import java.util.UUID;////@Slf4j//@Service//@AllArgsConstructor//public class SearchVisaSponsorshipUseCase {////    private final ObjectMapper objectMapper;//    private final RAGAssistant ragAssistant;//    private final Cache<String, CompanyVisaSponsorshipDto> localCache;//    private final CompanyVisaSponsorshipR2dbcRepository companyJobTitleDetailsR2dbcRepository;//    private final CompanyVisaSponsorshipEntityConverter companyVisaSponsorshipEntityConverter;////    public Mono<CompanyVisaSponsorshipEntity> saveToDatabase(CompanyVisaSponsorshipEntity entity) {//        return companyJobTitleDetailsR2dbcRepository.save(entity);//    }////    public Mono<CompanyVisaSponsorshipDto> getCompanyJobTitleResponse(CompanyJobTitleDetailsRequest request) {//        String company = request.company();//        String location = request.location();////        String cacheKey = company + "_" + location;//        var cachedValue = localCache.getIfPresent(cacheKey);//        if (cachedValue != null) {//            return Mono.just(cachedValue);//        }////        return companyJobTitleDetailsR2dbcRepository.findByCompanyAndLocation(company, location)//                .map(companyVisaSponsorshipEntityConverter::toDto)//                .switchIfEmpty(fetchVisaSponsorship(company, location, request.jobTitle())//                        .filter(this::isValidVisaSponsorshipEntity)//                        .flatMap(this::saveToDatabase)//                        .map(companyVisaSponsorshipEntityConverter::toDto))//                .doOnNext(dto -> localCache.put(cacheKey, dto))//                .defaultIfEmpty(CompanyVisaSponsorshipDto.DEFAULT_VALUE);//    }////    private Mono<CompanyVisaSponsorshipEntity> fetchVisaSponsorship(String company, String location, String jobTitle) {//        Sinks.Many<String> sink = Sinks.many().unicast().onBackpressureBuffer();//        String userPrompt = String.format("company:%s, job title:%s, location:%s", company, jobTitle, location);//        log.info("User Prompt:[{}]", userPrompt);////        ragAssistant.findCompany(UUID.randomUUID(), userPrompt)//                .onPartialResponse(sink::tryEmitNext)//                .onCompleteResponse(response -> sink.tryEmitComplete())//                .onError(sink::tryEmitError)//                .start();////        return sink.asFlux()//                .collectList()//                .map(parts -> String.join("", parts))//                .map(this::transformToCompanyJobTitleDetails)//                .filter(this::isValidVisaSponsorshipEntity)//                .flatMap(entity -> ensureIdBeforeSaving(entity, company, location))//                .doOnError(error -> log.error("Error fetching visa sponsorship stream", error));//    }////    private CompanyVisaSponsorshipEntity transformToCompanyJobTitleDetails(String jsonResponse) {//        try {//            log.info("AI assistant response: [{}]", jsonResponse);////            String cleanJsonResponse  = jsonResponse.replaceAll("```json", "")//                    .replaceAll("```", "")//                    .trim();////            JsonNode rootNode = objectMapper.readTree(cleanJsonResponse);//            String visaSponsorship = rootNode.get("visaSponsorship").asText();//            String salary = rootNode.get("salary").asText();//            String bonus = rootNode.get("bonus").asText();//            log.info("{}", rootNode);//            log.info("{}", visaSponsorship);////            if ("Skilled Worker".equals(visaSponsorship) || visaSponsorship.contains("Worker") || visaSponsorship.contains("available")) {//                CompanyVisaSponsorshipEntity entity = new CompanyVisaSponsorshipEntity();//                entity.setVisaSponsorship("Skilled Worker");////                return entity;//            } else {//                return new CompanyVisaSponsorshipEntity();//            }//        } catch (Exception ex) {//            log.warn("Error processing AI response: [{}]", jsonResponse);//            return new CompanyVisaSponsorshipEntity();//        }//    }////    private boolean isValidVisaSponsorshipEntity(CompanyVisaSponsorshipEntity entity) {//        return entity != null &&  entity.getVisaSponsorship() != null;//    }////    private Mono<CompanyVisaSponsorshipEntity> ensureIdBeforeSaving(CompanyVisaSponsorshipEntity entity,//                                                                    String company,//                                                                    String location) {//        entity.setId(UUID.randomUUID());//        entity.setCompany(company);//        entity.setLocation(location);////        return Mono.just(entity);//    }//}