package co.uk.offerland.job_track.application.query;import java.util.UUID;import co.uk.offerland.job_track.infrastructure.persistence.r2dbc.JobR2dbcRepository;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import co.uk.offerland.job_track.domain.entity.JobEntity;import co.uk.offerland.job_track.domain.entity.JobPhaseEntity;import co.uk.offerland.job_track.infrastructure.exception.JobNotFoundException;import lombok.RequiredArgsConstructor;import reactor.core.publisher.Mono;@Service@RequiredArgsConstructorpublic class JobQueryService {    private final JobR2dbcRepository jobR2dbcRepository;    public Mono<JobEntity> getJobByUserIdAndJobId(UUID userId, UUID jobId) {        return jobR2dbcRepository            .findByIdAndUserId(jobId, userId)            .switchIfEmpty(Mono.error(new JobNotFoundException("Job not found for user")));    }    public JobPhaseEntity getPhaseByJobAndPhaseId(UUID userId, UUID jobId, UUID phaseId) {        Mono<JobEntity> jobEntity = getJobByUserIdAndJobId(userId, jobId);//        return jobEntity.getPhases().stream()//            .filter(phase -> phase.getId().equals(phaseId))//            .findFirst()//            .orElseThrow(() -> new JobNotFoundException("Phase not found in the job"));        return null;    }}