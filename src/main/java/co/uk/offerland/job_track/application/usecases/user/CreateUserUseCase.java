package co.uk.offerland.job_track.application.usecases.user;import co.uk.offerland.job_track.application.dto.user.UserCreateResponse;import co.uk.offerland.job_track.domain.entity.UserEntity;import co.uk.offerland.job_track.infrastructure.persistence.r2dbc.UserR2dbcRepository;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import reactor.core.publisher.Mono;@Slf4j@Service@RequiredArgsConstructorpublic class CreateUserUseCase {    private final UserR2dbcRepository userR2dbcRepository;    public Mono<UserCreateResponse> createNewUser(String source) {        return userR2dbcRepository.save(new UserEntity(source))                .map(entity -> new UserCreateResponse(entity.getId().toString()))                .doOnNext(response -> log.info("New user saved successfully userId:[{}]", response.getUserId()))                .doOnError(error -> log.error("Error saving new user: {}", error.getMessage())) // Handle errors                .onErrorResume(e -> Mono.empty());    }}