package co.uk.offerland.job_track.application.usecases.user;import co.uk.offerland.job_track.application.dto.user.UserCreateResponse;import co.uk.offerland.job_track.application.dto.user.UserRegister;import co.uk.offerland.job_track.domain.entity.nosql.User;import co.uk.offerland.job_track.infrastructure.exception.UserAlreadyCreatedException;import co.uk.offerland.job_track.infrastructure.persistence.UserRepository;import co.uk.offerland.job_track.infrastructure.util.KeycloakService;import jakarta.ws.rs.core.Response;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.keycloak.admin.client.CreatedResponseUtil;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Service;import reactor.core.publisher.Mono;import java.util.ArrayList;import java.util.List;import java.util.UUID;@Slf4j@Service@RequiredArgsConstructorpublic class CreateUserUseCase {    private final UserRepository userRepository;    public Mono<UserCreateResponse> createNewUser(UUID userId) {        return userRepository.findByUserId(userId)                .flatMap(existingUser -> {                    log.warn("User already exists with userId: {}", userId);                    return Mono.just(new UserCreateResponse(existingUser.getUserId().toString())); // return the existing user                })                .switchIfEmpty(                        userRepository.save(new User(userId))                                .map(entity -> new UserCreateResponse(entity.getUserId().toString()))                                .doOnNext(response -> log.info("New user saved successfully userId:[{}]", response.getUserId()))                                .doOnError(error -> log.error("Error saving new user: {}", error.getMessage()))                );    }}