package co.uk.offerland.job_track.infrastructure.ai;import dev.langchain4j.data.document.DefaultDocument;import dev.langchain4j.data.document.Document;import dev.langchain4j.data.document.loader.FileSystemDocumentLoader;import dev.langchain4j.data.document.parser.apache.poi.ApachePoiDocumentParser;import dev.langchain4j.data.document.splitter.DocumentSplitters;import dev.langchain4j.data.segment.TextSegment;import dev.langchain4j.model.embedding.EmbeddingModel;import dev.langchain4j.store.embedding.EmbeddingStore;import dev.langchain4j.store.embedding.EmbeddingStoreIngestor;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Component;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.nio.file.Paths;import java.util.ArrayList;import java.util.List;@Slf4j@Component@AllArgsConstructorpublic class EmbeddingComponent {    private final EmbeddingModel embeddingModel;    private final EmbeddingStore embeddingStore;    public void loadSingleDocument() {        var currentDir = Paths.get("/home/deploy/files/2025-02-27_-_Worker_and_Temporary_Worker_small.xlsx");        try {            Document document = FileSystemDocumentLoader.loadDocument(currentDir, new ApachePoiDocumentParser());            List<TextSegment> textSegments = DocumentSplitters.recursive(1200, 200).split(document);            EmbeddingStoreIngestor embeddingStoreIngestor = EmbeddingStoreIngestor.builder()                    .embeddingModel(embeddingModel)                    .embeddingStore(embeddingStore)                    .build();            int batchSize = 500;            for (int i = 0; i < textSegments.size(); i += batchSize) {                int end = Math.min(i + batchSize, textSegments.size());                List<TextSegment> batch = textSegments.subList(i, end);                List<Document> documentBatch = new ArrayList<>();                for (TextSegment textSegment : batch) {                    Document doc = new DefaultDocument(textSegment.text(), textSegment.metadata());                    documentBatch.add(doc);                }                int allSegments = textSegments.size() / batchSize + 1;                int currentSegment = i / batchSize + 1;                try {                    embeddingStoreIngestor.ingest(documentBatch);                    log.info("Processed batch: {}/{}", currentSegment, allSegments);                    Thread.sleep(50);                } catch (InterruptedException e) {                    Thread.currentThread().interrupt();                    log.warn("Batch processing interrupted: ", e);                } catch (Exception e) {                    log.warn("Error processing batch {}", currentSegment, e);                }            }        } catch (Exception e) {            log.warn("Error loading or processing the document", e);        }    }}