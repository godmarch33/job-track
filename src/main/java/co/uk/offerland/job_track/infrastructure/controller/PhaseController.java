package co.uk.offerland.job_track.infrastructure.controller;import co.uk.offerland.job_track.application.dto.NextPhaseResponse;import co.uk.offerland.job_track.application.dto.phase.*;import co.uk.offerland.job_track.application.usecases.phase.AddPhaseToJobUseCase;import co.uk.offerland.job_track.application.usecases.phase.AvailablePhasesUseCase;import jakarta.validation.Valid;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.http.ResponseEntity;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.*;import reactor.core.publisher.Mono;import java.util.UUID;@Slf4j@RequiredArgsConstructor@RestController@Validated@RequestMapping("/api/users/{userId}/jobs/{jobId}/phases")public class PhaseController {    private final AddPhaseToJobUseCase addPhaseToJobUseCase;    private final AvailablePhasesUseCase availablePhasesUseCase;    /**     * Add a new phase to a job.     *     * @param userId  The ID of the user.     * @param jobId   The ID of the job.     * @param request The request body containing phase details.     * @return The newly added phase.     */    @PostMapping    public Mono<ResponseEntity<PhaseResponse>> addPhaseToJob(            @PathVariable UUID userId,            @PathVariable UUID jobId,            @Valid @RequestBody AddPhaseRequest request) {        log.info("Received request to add phase to job. userId={}, jobId={}, request={}", userId, jobId, request);        return addPhaseToJobUseCase.addPhase(userId, jobId, request)                .doOnNext(addedPhase -> log.info("Successfully added phase: {}", addedPhase))                .map(ResponseEntity::ok);    }    /**     * Remove phase from a job.     *     * @param userId  The ID of the user.     * @param jobId   The ID of the job.     * @param phaseId The request body containing phase details.     * @return The newly added phase.     */    @DeleteMapping("/{phaseId}")    public Mono<ResponseEntity<PhaseResponse>> removePhase(            @PathVariable UUID userId,            @PathVariable UUID jobId,            @PathVariable UUID phaseId) {        log.info("Received request to remove phase to job. userId={}, jobId={}, request={}", userId, jobId, phaseId);        return addPhaseToJobUseCase.removePhase(userId, jobId, phaseId)                .doOnNext(addedPhase -> log.info("Successfully remove phase: {}", phaseId))                .map(ResponseEntity::ok);    }    /**     * Add a new phase to a job.     *     * @param userId The ID of the user.     * @param jobId  The ID of the job.     * @return The available phases for this job.     */    @GetMapping("/available")    public Mono<ResponseEntity<ListPhaseResponse>> listAvailablePhases(            @PathVariable UUID userId,            @PathVariable UUID jobId) {        log.info("Received request fetching available phases userId={}, jobId={}", userId, jobId);        return availablePhasesUseCase.listAvailablePhases(userId, jobId)                .map(response -> ResponseEntity.ok(response));    }    @PostMapping("/{phaseId}/schedule")    public Mono<ResponseEntity<NextPhaseResponse>> scheduleJobPhase(@PathVariable UUID userId,                                                                    @PathVariable UUID jobId,                                                                    @PathVariable UUID phaseId,                                                                    @Valid @RequestBody ScheduleInterviewRequest request) {        log.info("Income request Scheduling phaseId:[{}] for jobId:[{}] and userId:[{}], request:[{}]", phaseId, jobId,                userId,                request);        return  addPhaseToJobUseCase.scheduleInterview(userId, jobId, phaseId, request)                        .map(ResponseEntity::ok);    }    @PostMapping("/next")    public Mono<ResponseEntity<PhasesResponse>> nextPhase(@PathVariable UUID userId, @PathVariable UUID jobId) {        log.info("Income request for next phase for jobId:[{}] and userId:[{}]",                jobId,                userId);        return addPhaseToJobUseCase.nextPhase(userId, jobId)                .map(ResponseEntity::ok);    }    @PostMapping("/offer")    public Mono<ResponseEntity<OfferResponse>> offer(@PathVariable UUID userId, @PathVariable UUID jobId,                                                     @Valid @RequestBody OfferRequest request) {        log.info("Income request for offer for jobId:[{}] and userId:[{}]",                 jobId,                 userId);        return addPhaseToJobUseCase.offer(userId, jobId, request)                .map(ResponseEntity::ok);    }}