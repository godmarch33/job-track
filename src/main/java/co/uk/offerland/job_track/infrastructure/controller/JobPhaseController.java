package co.uk.offerland.job_track.infrastructure.controller;import java.util.UUID;import org.springframework.http.ResponseEntity;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import co.uk.offerland.job_track.application.dto.NextPhaseResponse;import co.uk.offerland.job_track.application.dto.phase.AddPhaseRequest;import co.uk.offerland.job_track.application.dto.phase.AddPhasesResponse;import co.uk.offerland.job_track.application.dto.phase.ListPhaseResponse;import co.uk.offerland.job_track.application.dto.phase.OfferRequest;import co.uk.offerland.job_track.application.dto.phase.PhaseResponse;import co.uk.offerland.job_track.application.dto.phase.SchedulePhaseRequest;import co.uk.offerland.job_track.application.usecases.phase.AddPhaseToJobUseCase;import co.uk.offerland.job_track.application.usecases.phase.ListAvailablePhasesUseCase;import co.uk.offerland.job_track.application.usecases.phase.ListJobPhasesUseCase;import jakarta.validation.Valid;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;@Slf4j@RequiredArgsConstructor@RestController@Validated@RequestMapping("/api/users/{userId}/jobs/{jobId}/phases")public class JobPhaseController {    private final AddPhaseToJobUseCase addPhaseToJobUseCase;    private final ListAvailablePhasesUseCase listAvailablePhasesUseCase;    private final ListJobPhasesUseCase listJobPhasesUseCase;    /**     * Add a new phase to a job.     *     * @param userId  The ID of the user.     * @param jobId   The ID of the job.     * @param request The request body containing phase details.     * @return The newly added phase.     */    @PostMapping    public ResponseEntity<PhaseResponse> addPhaseToJob(        @PathVariable UUID userId,        @PathVariable UUID jobId,        @Valid @RequestBody AddPhaseRequest request) {        log.info("Received request to add phase to job. userId={}, jobId={}, request={}", userId, jobId, request);        PhaseResponse addedPhase = addPhaseToJobUseCase.add(userId, jobId, request);        log.info("Successfully added phase: {}", addedPhase);        return ResponseEntity.ok(addedPhase);    }    /**     * Add a new phase to a job.     *     * @param userId The ID of the user.     * @param jobId  The ID of the job.     * @return The available phases for this job.     */    @GetMapping("/available")    public ResponseEntity<ListPhaseResponse> listAvailablePhases(        @PathVariable UUID userId, @PathVariable UUID jobId) {        log.info("Fetching available phases for job. userId={}, jobId={}", userId, jobId);        ListPhaseResponse listAvailablePhases = listAvailablePhasesUseCase.listAvailablePhases(userId, jobId);        return ResponseEntity.ok(listAvailablePhases);    }    @GetMapping    public ResponseEntity<AddPhasesResponse> getJobPhaseHistory(@PathVariable UUID userId, @PathVariable UUID jobId) {        log.info("Fetching phases for job. userId={}, jobId={}", userId, jobId);        AddPhasesResponse phasesResponse = listJobPhasesUseCase.listPhases(userId, jobId);        return ResponseEntity.ok(phasesResponse);    }    @PostMapping("/{phaseId}/schedule")    public ResponseEntity<NextPhaseResponse> scheduleJobPhase(@PathVariable UUID userId, @PathVariable UUID jobId,                                                              @PathVariable UUID phaseId,                                                              @Valid @RequestBody SchedulePhaseRequest request) {        log.info("Income request Scheduling phaseId:[{}] for jobId:[{}] and userId:[{}], request:[{}]", phaseId, jobId,                 userId,                 request);        var nextPhaseResponse =            addPhaseToJobUseCase.addScheduleInterviewTimeJobPhase(userId, jobId, phaseId, request);        log.info("Scheduled date and time for  jobId:[{}] and userId:[{}]",                 jobId,                 userId);        return ResponseEntity.ok(nextPhaseResponse);    }    @PostMapping("/next")    public ResponseEntity<AddPhasesResponse> nextPhase(@PathVariable UUID userId, @PathVariable UUID jobId) {        log.info("Income request for next phase for jobId:[{}] and userId:[{}]",                 jobId,                 userId);        AddPhasesResponse phaseResponse = addPhaseToJobUseCase.nextPhase(userId, jobId);        return ResponseEntity.ok(phaseResponse);    }    @PostMapping("/offer")    public ResponseEntity<AddPhasesResponse> offer(@PathVariable UUID userId, @PathVariable UUID jobId,                                                   @Valid @RequestBody OfferRequest request) {        log.info("Income request for offer for jobId:[{}] and userId:[{}]",                 jobId,                 userId);        AddPhasesResponse phaseResponse = addPhaseToJobUseCase.offer(userId, jobId, request);        return ResponseEntity.ok(phaseResponse);    }}