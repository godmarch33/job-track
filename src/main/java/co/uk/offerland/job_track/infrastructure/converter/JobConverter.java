package co.uk.offerland.job_track.infrastructure.converter;import java.time.Instant;import java.util.Comparator;import java.util.List;import java.util.Set;import co.uk.offerland.job_track.application.dto.job.*;import co.uk.offerland.job_track.application.dto.phase.InterviewNoteResponse;import co.uk.offerland.job_track.application.dto.phase.PhaseStatusInfo;import co.uk.offerland.job_track.application.dto.user.*;import co.uk.offerland.job_track.domain.entity.ContactPerson;import co.uk.offerland.job_track.domain.entity.PhaseStatus;import co.uk.offerland.job_track.domain.entity.nosql.*;import org.springframework.stereotype.Component;import co.uk.offerland.job_track.application.dto.phase.PhaseResponse;import static co.uk.offerland.job_track.domain.entity.nosql.DailyProgressEntity.MAX_DAILY_CV;import static java.util.Optional.ofNullable;@Componentpublic class JobConverter {    public Job toEntity(CreateJobRequest request, Instant now) {        var newJob = new Job();        newJob.initializeAvailablePhases();        newJob.setCompany(request.getCompany());        newJob.setJobUrl(request.getJobUrl());        newJob.setTitle(request.getTitle());        newJob.setLocation(request.getLocation());        newJob.setCompanyLogo(request.getCompanyLogo());        newJob.setJobSalary(request.getJobSalary());        newJob.setDesiredSalary(request.getDesiredSalary());        newJob.setCurrency(request.getCurrency());        newJob.setAddType(request.getAddType());        newJob.setDescription(request.getDescription());        newJob.setCreatedAt(now);        newJob.setUpdatedAt(now);        return newJob;    }    public ListJobs toJobsResponse(User user) {        JobPhasesStatusEntity jobPhasesStatus = user.getJobPhasesStatus();        int numberApplyCv = user.getInterviewStat().getDailyProgress().getNumberApplyCv();        return new ListJobs(                user.getTrialPeriodDate(),                user.getTelegramRegisterId(),                user.getJobs().stream()                        .map(this::toResponse)                        .toList(),                InterviewFunnelResponse.builder()                        .dailyProgress(new DailyProgress(MAX_DAILY_CV, numberApplyCv))                        .build(),                createJobPhasesStatus(numberApplyCv, jobPhasesStatus)        );    }    public JobPhasesStatus createJobPhasesStatus(int numberApplyCv, JobPhasesStatusEntity jobPhasesStatus) {        return new JobPhasesStatus(                jobPhasesStatus.getSavedCount(),                jobPhasesStatus.getAppliedCount(),                jobPhasesStatus.getInterviewCount(),                jobPhasesStatus.getRejectedCount(),                jobPhasesStatus.getDeclinedCount(),                jobPhasesStatus.getAcceptedCount(),                new DailyProgress( MAX_DAILY_CV, numberApplyCv)        );    }    public CreateJobResponse toResponse(Job job) {        var result = new CreateJobResponse();        result.setId(job.getJobId().toString());        result.setCompany(job.getCompany());        result.setLastUpdate(job.getUpdatedAt());        result.setTitle(job.getTitle());        result.setLocation(job.getLocation());        result.setJobUrl(job.getJobUrl());        result.setJobSalary(job.getJobSalary());        result.setCurrency(toCurrencySign(job.getCurrency()));        result.setAddType(job.getAddType());        result.setDescription(job.getDescription());        result.setNotes(new InterviewNoteResponse(ofNullable(job.getNotes()).map(InterviewNote::getNotes).orElse("")));        result.setCompanyLogo(job.getCompanyLogo());        result.setWishlistDate(job.getCreatedAt().toString());        List<PhaseResponse> phases = job.getPhases().stream()                .sorted(Comparator.comparingInt(Phase::getOrderIndex))                .map(this::toPhaseResponse)                .toList();        result.setPhases(phases);        result.setAvailablePhases(job.getAvailablePhases());        Set<String> terminalPhases = Set.of(                PhaseStatus.ACCEPTED.name(),                PhaseStatus.REJECTED.name(),                PhaseStatus.DECLINED.name());        result.setCurrentPhase(job.getPhases().stream()                .filter(e -> e.getStatusInfoEntity().getStatus() == PhaseStatus.IN_PROGRESS)                .map(this::toPhaseResponse)                .findFirst()                .orElseGet(() -> phases.stream()                        .filter(e -> terminalPhases.contains(e.getPhaseStatusInfo().getStatus()))                        .findFirst()                        .orElseThrow()));        result.getContactPersons().addAll(                job.getContactPersons().stream()                        .map(this::toContactPersonResponse)                        .toList());        return result;    }    private String toCurrencySign(String currency) {        if (currency == null) {            return "$";        }        return switch (currency) {            case "EUR" -> "€";            case "USD" -> "$";            case "GBP" -> "£";            default -> "$";        };    }    public PhaseResponse toPhaseResponse(Phase phase) {        var result = new PhaseResponse();        result.setLastUpdateDate(phase.getLastUpdatedDate());        result.setOrderIndex(phase.getOrderIndex());        result.setName(phase.getName());        result.setId(phase.getJobPhaseId());        result.setInterviewScheduleTime(phase.getInterviewScheduleTime());        var phaseStatusInfo = new PhaseStatusInfo();        phaseStatusInfo.setStatus(phase.getStatusInfoEntity().getStatus().name());        phaseStatusInfo.setSubStatus(phase.getStatusInfoEntity().getSubStatus().name());        phaseStatusInfo.setNextStageButtonName(phase.getStatusInfoEntity().getNextStageButtonName());        phaseStatusInfo.setMsgTooltip(phase.getStatusInfoEntity().getMsgTooltip());        result.setPhaseStatusInfo(phaseStatusInfo);        return result;    }    public ContactPersonResponse toContactPersonResponse(ContactPerson contactPerson) {        var result = new ContactPersonResponse();        result.setFullName(contactPerson.getFullName());        result.setEmail(contactPerson.getEmail());        result.setPhone(contactPerson.getPhone());        result.setLinkedin(contactPerson.getLinkedin());        result.setCommunicationChannel(contactPerson.getCommunicationChannel());        return result;    }}