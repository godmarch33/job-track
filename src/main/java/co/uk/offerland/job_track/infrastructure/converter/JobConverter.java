package co.uk.offerland.job_track.infrastructure.converter;import java.time.Instant;import java.util.Comparator;import java.util.List;import co.uk.offerland.job_track.application.dto.user.*;import co.uk.offerland.job_track.domain.entity.ContactPerson;import co.uk.offerland.job_track.domain.entity.PhaseStatus;import co.uk.offerland.job_track.domain.entity.nosql.DailyProgressEntity;import co.uk.offerland.job_track.domain.entity.nosql.Job;import co.uk.offerland.job_track.domain.entity.nosql.Phase;import co.uk.offerland.job_track.domain.entity.nosql.User;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Component;import co.uk.offerland.job_track.application.dto.phase.PhaseResponse;@Componentpublic class JobConverter {    private static final Logger log = LoggerFactory.getLogger(JobConverter.class);    public Job toEntity(CreateJobRequest request, Instant now) {        var newJob = new Job();        newJob.initializeAvailablePhases();        newJob.setCompany(request.getCompany());        newJob.setJobUrl(request.getJobUrl());        newJob.setTitle(request.getTitle());        newJob.setLocation(request.getLocation());        newJob.setCompanyLogo(request.getCompanyLogo());        newJob.setJobSalary(request.getJobSalary());        newJob.setDesiredSalary(request.getDesiredSalary());        newJob.setCreatedAt(now);        newJob.setUpdatedAt(now);        return newJob;    }    public ListJobs toJobsResponse(User user) {        return new ListJobs(                user.getJobs().stream()                        .map(this::toResponse)                        .toList(),                new InterviewStats(                        user.getInterviewStat().getSavedCount(),                        user.getInterviewStat().getAppliedCount(),                        user.getInterviewStat().getInterviewCount(),                        user.getInterviewStat().getRejectedCount(),                        user.getInterviewStat().getAcceptedCount(),                        new DailyProgress(                                DailyProgressEntity.MAX_DAILY_CV,                                user.getInterviewStat().getDailyProgress().getCurrentCVAmount()                        )                )        );    }    public CreateJobResponse toResponse(Job job) {        var result = new CreateJobResponse();        result.setId(job.getJobId().toString());        result.setCompany(job.getCompany());        result.setTitle(job.getTitle());        result.setLocation(job.getLocation());        result.setJobUrl(job.getJobUrl());        result.setJobSalary(job.getJobSalary());        result.setNotes(job.getNotes());        result.setCompanyLogo(job.getCompanyLogo());        result.setWishlistDate(job.getCreatedAt().toString());        List<PhaseResponse> phases = job.getPhases().stream()                .sorted(Comparator.comparingInt(Phase::getOrderIndex))                .map(this::toPhaseResponse)                .toList();        result.setPhases(phases);        result.setAvailablePhases(job.getAvailablePhases());        result.setCurrentPhase(job.getPhases().stream()                .filter(e -> e.getStatus() == PhaseStatus.IN_PROGRESS)                .map(this::toPhaseResponse)                .findFirst()                .orElse(phases.getLast()));//        job.getPhases().stream()//                .filter(e -> e.getLastUpdatedDate() != null)//                .max(Comparator.comparing(JobPhaseEntity::getLastUpdatedDate))//                .ifPresent(e -> result.setLastUpdate(e.getLastUpdatedDate()));        if (job.getContactPerson() != null) {            result.setContactPerson(createContactResponse(job.getContactPerson()));        }        return result;    }    private ContactPersonResponse createContactResponse(ContactPerson contactPerson) {        ContactPersonResponse result = new ContactPersonResponse();        result.setFirstName(contactPerson.getFirstName());        result.setLastName(contactPerson.getLastName());        result.setEmail(contactPerson.getEmail());        result.setPhone(contactPerson.getPhone());        result.setLinkedin(contactPerson.getLinkedin());        return result;    }    public PhaseResponse toPhaseResponse(Phase jobPhaseEntity) {        var result = new PhaseResponse();        result.setLastUpdateDate(jobPhaseEntity.getLastUpdatedDate());        result.setOrderIndex(jobPhaseEntity.getOrderIndex());        result.setStatus(jobPhaseEntity.getStatus());        result.setName(jobPhaseEntity.getPhaseName());        result.setId(jobPhaseEntity.getJobPhaseId());        result.setSubStatus(jobPhaseEntity.getSubStatus().getLabel());        result.setInterviewScheduleTime(jobPhaseEntity.getInterviewScheduleTime());        return result;    }    public ContactPersonResponse toContactPersonResponse(Job savedJobEntity) {        ContactPersonResponse result = new ContactPersonResponse();        ContactPerson contactPerson = savedJobEntity.getContactPerson();        result.setFirstName(contactPerson.getFirstName());        result.setLastName(contactPerson.getLastName());        result.setEmail(contactPerson.getEmail());        result.setPhone(contactPerson.getPhone());        result.setLinkedin(contactPerson.getLinkedin());        return result;    }}