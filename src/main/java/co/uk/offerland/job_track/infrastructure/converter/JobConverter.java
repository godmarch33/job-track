package co.uk.offerland.job_track.infrastructure.converter;import java.time.Instant;import java.util.Comparator;import java.util.List;import java.util.NoSuchElementException;import org.springframework.stereotype.Component;import co.uk.offerland.job_track.application.dto.phase.PhaseResponse;import co.uk.offerland.job_track.application.dto.user.ContactPersonResponse;import co.uk.offerland.job_track.application.dto.user.CreateJobRequest;import co.uk.offerland.job_track.application.dto.user.CreateJobResponse;import co.uk.offerland.job_track.application.dto.user.ListJobs;import co.uk.offerland.job_track.domain.entity.ContactPersonEntity;import co.uk.offerland.job_track.domain.entity.JobEntity;import co.uk.offerland.job_track.domain.entity.JobPhaseEntity;import co.uk.offerland.job_track.domain.entity.UserEntity;import reactor.core.publisher.Mono;@Componentpublic class JobConverter {    public JobEntity toEntity(CreateJobRequest request, UserEntity foundUser, Instant now) {        var result = new JobEntity();        result.setCompany(request.getCompany());        result.setLink(request.getLink());        result.setTitle(request.getTitle());        result.setLocation(request.getLocation());        result.setCompanyLogo(request.getCompanyLogo());        result.setSalary(request.getSalary());        result.setCreatedAt(now);        result.setUpdatedAt(now);        result.setUser(foundUser);        foundUser.getJobs().add(result);        return result;    }    public ListJobs toResponse(List<JobEntity> jobs) {        return new ListJobs(jobs.stream().map(this::toResponse).toList());    }    public CreateJobResponse toResponse(JobEntity job) {        var result = new CreateJobResponse();        result.setId(job.getId().toString());        result.setCompany(job.getCompany());        result.setTitle(job.getTitle());        result.setLocation(job.getLocation());        result.setLink(job.getLink());        result.setSalary(job.getSalary());        result.setNotes(job.getNotes());        result.setCompanyLogo(job.getCompanyLogo());        result.setWishlistDate(job.getCreatedAt().toString());        result.setPhaseResponseList(job.getPhases().stream().map(this::toResponse).toList());        result.setPhaseAvailableResponseList(job.getAvailablePhases());        JobPhaseEntity latestUpdatedElements = job.getPhases().stream()            .filter(e -> e.getLastUpdatedDate() != null)            .max(Comparator.comparing(JobPhaseEntity::getLastUpdatedDate))            .orElseThrow(() -> new NoSuchElementException("No phases available"));        result.setLastUpdate(latestUpdatedElements.getLastUpdatedDate());        if(job.getContactPerson() != null) {            result.setContactPerson(createContactResponse(job.getContactPerson()));        }        return result;    }    private ContactPersonResponse createContactResponse(ContactPersonEntity contactPerson) {        ContactPersonResponse result = new ContactPersonResponse();        result.setFirstName(contactPerson.getFirstName());        result.setLastName(contactPerson.getLastName());        result.setEmail(contactPerson.getEmail());        result.setPhone(contactPerson.getPhone());        result.setLinkedin(contactPerson.getLinkedin());        return result;    }    public PhaseResponse toResponse(JobPhaseEntity jobPhaseEntity) {        var result = new PhaseResponse();        result.setDate(jobPhaseEntity.getLastUpdatedDate());        result.setOrderIndex(jobPhaseEntity.getOrderIndex());        result.setStatus(jobPhaseEntity.getStatus());        result.setName(jobPhaseEntity.getPhaseName());        result.setId(jobPhaseEntity.getId());        result.setActiveStatus(jobPhaseEntity.getActiveStatus());        result.setInterviewScheduleTime(jobPhaseEntity.getInterviewScheduleTime());        return result;    }    public ContactPersonResponse toContactPersonResponse(JobEntity savedJobEntity) {        ContactPersonResponse result = new ContactPersonResponse();        ContactPersonEntity contactPerson = savedJobEntity.getContactPerson();        result.setFirstName(contactPerson.getFirstName());        result.setLastName(contactPerson.getLastName());        result.setEmail(contactPerson.getEmail());        result.setPhone(contactPerson.getPhone());        result.setLinkedin(contactPerson.getLinkedin());        return result;    }    public Mono<ListJobs> toResponse1(Mono<List<JobEntity>> listMono) {        return null;    }}