package co.uk.offerland.job_track.infrastructure.controller;import co.uk.offerland.job_track.application.dto.user.ContactPersonRequest;import co.uk.offerland.job_track.application.dto.user.ContactPersonResponse;import co.uk.offerland.job_track.application.dto.user.CreateJobRequest;import co.uk.offerland.job_track.application.dto.user.CreateJobResponse;import co.uk.offerland.job_track.application.dto.user.JobNoteRequest;import co.uk.offerland.job_track.application.dto.user.ListJobs;import co.uk.offerland.job_track.application.usecases.user.AssignJobToUserUseCase;import co.uk.offerland.job_track.infrastructure.util.PrintJson;import jakarta.validation.Valid;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import reactor.core.publisher.Mono;import java.util.UUID;@Slf4j@RestController@Validated@RequestMapping("/api/users/{userId}/jobs")@RequiredArgsConstructorpublic class UserJobController {    private final AssignJobToUserUseCase assignJobToUserUseCase;    private final PrintJson print;//    @PostMapping//    public ResponseEntity<CreateJobResponse> addJobToUser(@PathVariable UUID userId,//                                                          @RequestBody CreateJobRequest request) {//        log.info("Income add job userId:[{}], request:[{}]", userId, request);//        return ResponseEntity//                .status(HttpStatus.OK)//                .body(assignJobToUserUseCase.addJobToUser(userId, request));//    }    @GetMapping    public Mono<ResponseEntity<ListJobs>> getUserJobs(@PathVariable UUID userId) {        log.info("Income get jobs request userId:[{}]", userId);        return assignJobToUserUseCase.getJobsByUserId(userId)                .map(jobs -> ResponseEntity.ok(jobs))                .doOnNext(response -> log.info("Get jobs for userId:[{}] ,jobs:[{}]", userId, print.json(response)));    }//    @PostMapping("/{jobId}/contact-person")//    public ResponseEntity<ContactPersonResponse> addContactPerson(@PathVariable UUID userId, @PathVariable UUID jobId,//                                                                  @Valid @RequestBody ContactPersonRequest request) {//        log.info("Adding contact person to jobId:[{}] for userId:[{}], request:[{}]", jobId, userId, request);////        var contactPersonResponse = assignJobToUserUseCase.addContactPerson(userId, jobId, request);//        return ResponseEntity.ok(contactPersonResponse);////    }//    @PostMapping("/{jobId}/notes")//    public ResponseEntity<Void> addJobNote(@PathVariable UUID userId, @PathVariable UUID jobId,//                                           @Valid @RequestBody JobNoteRequest request) {//        log.info("Income request for adding note to jobId:[{}] for userId:[{}], request:[{}]", jobId, userId, request);//        assignJobToUserUseCase.addJobNote(userId, jobId, request);//        return ResponseEntity.status(HttpStatus.CREATED).build();//    }}