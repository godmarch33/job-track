package co.uk.offerland.job_track.infrastructure.exception;import lombok.extern.slf4j.Slf4j;import org.springframework.boot.autoconfigure.web.WebProperties;import org.springframework.boot.autoconfigure.web.reactive.error.AbstractErrorWebExceptionHandler;import org.springframework.boot.web.reactive.error.ErrorAttributes;import org.springframework.context.ApplicationContext;import org.springframework.core.annotation.Order;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.codec.ServerCodecConfigurer;import org.springframework.stereotype.Component;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.reactive.function.BodyInserters;import org.springframework.web.reactive.function.server.RequestPredicates;import org.springframework.web.reactive.function.server.RouterFunction;import org.springframework.web.reactive.function.server.RouterFunctions;import org.springframework.web.reactive.function.server.ServerRequest;import org.springframework.web.reactive.function.server.ServerResponse;import org.springframework.web.server.ResponseStatusException;import org.springframework.web.server.ServerWebInputException;import reactor.core.publisher.Mono;import java.util.Map;import java.util.stream.Collectors;@Slf4j@Component@Order(-2)public class GlobalExceptionHandler extends AbstractErrorWebExceptionHandler {    public GlobalExceptionHandler(ErrorAttributes errorAttributes,                                  WebProperties.Resources resources,                                  ApplicationContext applicationContext,                                  ServerCodecConfigurer serverCodecConfigurer) {        super(errorAttributes, resources, applicationContext);        super.setMessageWriters(serverCodecConfigurer.getWriters());        super.setMessageReaders(serverCodecConfigurer.getReaders());    }    @Override    protected RouterFunction<ServerResponse> getRoutingFunction(ErrorAttributes errorAttributes) {        return RouterFunctions.route(RequestPredicates.all(), this::renderErrorResponse);    }    private Mono<ServerResponse> renderErrorResponse(ServerRequest request) {        Throwable error = getError(request);        return switch (error) {            case UserNotFoundException e -> handleUserNotFoundException(e);            case InvalidPhaseException e -> handleInvalidPhaseException(e);            case JobNotFoundException e -> handleJobNotFoundException(e);            case JobPhaseNotFoundException e -> handleJobPhaseNotFoundException(e);            case JobAlreadyExistsException e -> handleJobAlreadyExistsException(e);            case MethodArgumentNotValidException e -> handleValidationExceptions(e);            case ServerWebInputException e -> handleBadRequest(e);            case PhaseNotFoundException e -> handlePhaseNotFoundException(e);            case ResponseStatusException e -> handleResponseStatusException(e);            default -> handleGeneralException(error);        };    }    public Mono<ServerResponse> handleUserNotFoundException(UserNotFoundException ex) {        log.warn("User not found:[{}]", ex.getMessage());        return response(ex.getHttpStatus(), ex.getMessage());    }    public Mono<ServerResponse> handleInvalidPhaseException(InvalidPhaseException ex) {        log.warn("Exception phase:[{}]", ex.getMessage());        return response(HttpStatus.BAD_REQUEST, ex.getMessage());    }    public Mono<ServerResponse> handleBadRequest(ServerWebInputException ex) {        log.warn("Bad request:[{}]", ex);        return response(HttpStatus.BAD_REQUEST, ex.getMessage());    }    public Mono<ServerResponse> handleJobNotFoundException(JobNotFoundException ex) {        log.warn("Job not found:[{}]", ex.getMessage());        return response(HttpStatus.NOT_FOUND, ex.getMessage());    }    public Mono<ServerResponse> handleJobPhaseNotFoundException(JobPhaseNotFoundException ex) {        log.warn("Job phase not found:[{}]", ex.getMessage());        return response(HttpStatus.NOT_FOUND, ex.getMessage());    }    public Mono<ServerResponse> handlePhaseNotFoundException(PhaseNotFoundException ex) {        log.warn("Phase not found:[{}]", ex.getMessage());        return response(HttpStatus.NOT_FOUND, ex.getMessage());    }    public Mono<ServerResponse> handleJobAlreadyExistsException(JobAlreadyExistsException ex) {        log.warn("Job already exists:[{}]", ex.getMessage());        return response(HttpStatus.NOT_FOUND, ex.getMessage());    }    public Mono<ServerResponse> handleValidationExceptions(MethodArgumentNotValidException ex) {        log.warn("Validation exception", ex);        Map<String, String> errors = ex.getBindingResult().getFieldErrors().stream()                .collect(Collectors.toMap(                        fieldError -> fieldError.getField(),                        fieldError -> fieldError.getDefaultMessage(),                        (existing, replacement) -> existing));        log.warn("Validation failed:[{}]", errors);        return response(HttpStatus.BAD_REQUEST, ex.getMessage());    }    public Mono<ServerResponse> handleResponseStatusException(ResponseStatusException ex) {        log.warn("Handled HTTP exception:[{}], reason:[{}]", ex.getStatusCode(), ex.getReason());        return response(HttpStatus.valueOf(ex.getStatusCode().value()), ex.getMessage());    }    public Mono<ServerResponse> handleGeneralException(Throwable ex) {        log.error("Unexpected error occurred:[{}]", ex.getMessage(), ex);        return response(HttpStatus.INTERNAL_SERVER_ERROR, "Unexpected error occurred");    }    private Mono<ServerResponse> response(HttpStatus httpStatus, String message) {        return ServerResponse                .status(httpStatus)                .contentType(MediaType.APPLICATION_JSON)                .body(BodyInserters.fromValue(new ApiError(message)));    }}