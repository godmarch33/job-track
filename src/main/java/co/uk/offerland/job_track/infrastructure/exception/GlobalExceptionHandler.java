package co.uk.offerland.job_track.infrastructure.exception;import lombok.extern.slf4j.Slf4j;import org.springframework.boot.autoconfigure.web.WebProperties;import org.springframework.boot.autoconfigure.web.reactive.error.AbstractErrorWebExceptionHandler;import org.springframework.boot.web.reactive.error.ErrorAttributes;import org.springframework.context.ApplicationContext;import org.springframework.core.annotation.Order;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.codec.ServerCodecConfigurer;import org.springframework.stereotype.Component;import org.springframework.web.reactive.function.BodyInserters;import org.springframework.web.reactive.function.server.RequestPredicates;import org.springframework.web.reactive.function.server.RouterFunction;import org.springframework.web.reactive.function.server.RouterFunctions;import org.springframework.web.reactive.function.server.ServerRequest;import org.springframework.web.reactive.function.server.ServerResponse;import org.springframework.web.server.ServerWebInputException;import reactor.core.publisher.Mono;@Slf4j@Component@Order(-2)public class GlobalExceptionHandler extends AbstractErrorWebExceptionHandler {    public GlobalExceptionHandler(ErrorAttributes errorAttributes,                                  WebProperties.Resources resources,                                  ApplicationContext applicationContext,                                  ServerCodecConfigurer serverCodecConfigurer) {        super(errorAttributes, resources, applicationContext);        super.setMessageWriters(serverCodecConfigurer.getWriters());        super.setMessageReaders(serverCodecConfigurer.getReaders());    }    @Override    protected RouterFunction<ServerResponse> getRoutingFunction(ErrorAttributes errorAttributes) {        return RouterFunctions.route(RequestPredicates.all(), this::renderErrorResponse);    }    private Mono<ServerResponse> renderErrorResponse(ServerRequest request) {        Throwable error = getError(request);        if (error instanceof ServerWebInputException) {            return handleBadRequest((ServerWebInputException) error);        } else if (error instanceof UserNotFoundException) {            return handleUserNotFoundException((UserNotFoundException) error);        }        return handleGeneralException((UserNotFoundException) error);    }    public Mono<ServerResponse> handleUserNotFoundException(UserNotFoundException ex) {        log.warn("User not found: {}", ex.getMessage());        return ServerResponse                .status(ex.getHttpStatus())                .contentType(MediaType.APPLICATION_JSON)                .body(BodyInserters.fromValue(new ApiError(ex.getMessage())));    }    public Mono<ServerResponse> handleBadRequest(ServerWebInputException ex) {        log.warn("Available phase not available: {}", ex.getMessage());        return ServerResponse                .status(HttpStatus.BAD_REQUEST)                .contentType(MediaType.APPLICATION_JSON)                .body(BodyInserters.fromValue(new ApiError(ex.getMessage())));    }    public Mono<ServerResponse> handleGeneralException(Exception ex) {        log.error("Unexpected error occurred: {}", ex.getMessage(), ex);        return ServerResponse                .status(HttpStatus.INTERNAL_SERVER_ERROR)                .contentType(MediaType.APPLICATION_JSON)                .body(BodyInserters.fromValue(new ApiError("Unexpected error occurred")));    }}// Configuration for WebProperties.Resources//package co.uk.offerland.job_track.infrastructure.exception;////import lombok.extern.slf4j.Slf4j;//import org.springframework.boot.autoconfigure.web.WebProperties;//import org.springframework.boot.autoconfigure.web.reactive.error.AbstractErrorWebExceptionHandler;//import org.springframework.boot.autoconfigure.web.reactive.error.DefaultErrorWebExceptionHandler;//import org.springframework.boot.web.reactive.error.ErrorAttributes;//import org.springframework.context.ApplicationContext;//import org.springframework.http.HttpStatus;//import org.springframework.http.ResponseEntity;//import org.springframework.web.bind.annotation.ControllerAdvice;//import org.springframework.web.bind.annotation.ExceptionHandler;//import org.springframework.web.bind.annotation.ResponseBody;//import org.springframework.web.reactive.function.server.RouterFunction;//import org.springframework.web.reactive.function.server.ServerResponse;//import org.springframework.web.server.ServerWebExchange;//import org.springframework.web.server.handler.ResponseStatusExceptionHandler;//import reactor.core.publisher.Mono;////@Slf4j//@ControllerAdvice//public class GlobalExceptionHandler extends AbstractErrorWebExceptionHandler {////    /**//     * Create a new {@code AbstractErrorWebExceptionHandler}.//     *//     * @param errorAttributes    the error attributes//     * @param resources          the resources configuration properties//     * @param applicationContext the application context//     * @since 2.4.0//     *///    public GlobalExceptionHandler(ErrorAttributes errorAttributes, WebProperties.Resources resources, ApplicationContext applicationContext) {//        super(errorAttributes, resources, applicationContext);//    }////    @ExceptionHandler(UserNotFoundException.class)//    public Mono<ResponseEntity<ApiError>> handleUserNotFoundException(UserNotFoundException ex) {//        log.warn("User not found: {}", ex.getMessage());//        return Mono.just(ResponseEntity//                .status(HttpStatus.NOT_FOUND)//                .body(new ApiError(HttpStatus.NOT_FOUND, ex.getMessage())));//    }////    @Override//    protected RouterFunction<ServerResponse> getRoutingFunction(ErrorAttributes errorAttributes) {//        log.info("dfsdfsd {}", errorAttributes);//        return null;//    }////    //        return Mono.just(ResponseEntity////                .status(HttpStatus.NOT_FOUND)////                .body(new ApiError(HttpStatus.NOT_FOUND, ex.getMessage())));//////    @ExceptionHandler(InvalidPhaseException.class)////    @ResponseStatus(HttpStatus.BAD_REQUEST)////    public ResponseEntity<ApiError> handleUserNotFoundException(InvalidPhaseException ex) {////        log.warn("Available phase not available: {}", ex.getMessage());////////        return ResponseEntity.ok(new ApiError(HttpStatus.BAD_REQUEST, ex.getMessage()));////    }////////    @ExceptionHandler(JobNotFoundException.class)////    @ResponseStatus(HttpStatus.NOT_FOUND)////    public ResponseEntity<ApiError> handleJobNotFoundException(JobNotFoundException ex) {////        log.warn("Job not found: {}", ex.getMessage());////////        return ResponseEntity.ok(new ApiError(HttpStatus.NOT_FOUND, ex.getMessage()));////    }////////    @ExceptionHandler(JobPhaseNotFoundException.class)////    @ResponseStatus(HttpStatus.NOT_FOUND)////    public ResponseEntity<ApiError> handleJobNotFoundException(JobPhaseNotFoundException ex) {////        log.warn("Job phase not found: {}", ex.getMessage());////////        return ResponseEntity.ok(new ApiError(HttpStatus.NOT_FOUND, ex.getMessage()));////    }////////    @ExceptionHandler(JobAlreadyExistsException.class)////    @ResponseStatus(HttpStatus.BAD_REQUEST)////    public ResponseEntity<ApiError> handleJobNotFoundException(JobAlreadyExistsException ex) {////        log.warn("Job already exists: {}", ex.getMessage());////////        return ResponseEntity.ok(new ApiError(HttpStatus.NOT_FOUND, ex.getMessage()));////    }////////    @ResponseStatus(HttpStatus.BAD_REQUEST)////    @ExceptionHandler(MethodArgumentNotValidException.class)////    public ResponseEntity<ApiError> handleValidationExceptions(MethodArgumentNotValidException ex) {////        log.warn("Validation failed: {} errors", ex.getBindingResult().getFieldErrors().size());////        log.warn("Validation exception", ex);////////        Map<String, String> errors = ex.getBindingResult().getFieldErrors().stream()////                .collect(Collectors.toMap(////                        fieldError -> fieldError.getField(),////                        fieldError -> fieldError.getDefaultMessage(),////                        (existing, replacement) -> existing));////////        return ResponseEntity.ok(new ApiError(HttpStatus.BAD_REQUEST, "Validation error", errors));////    }////////    @ExceptionHandler(ResponseStatusException.class)////    public ResponseEntity<ApiError> handleResponseStatusException(ResponseStatusException ex) {////        log.warn("Handled HTTP exception: {} - {}", ex.getStatusCode(), ex.getReason());////////        return ResponseEntity.ok(new ApiError(HttpStatus.valueOf(ex.getStatusCode().value()), ex.getReason()));////    }////////    @ExceptionHandler(Exception.class)////    public ResponseEntity<ApiError> handleGeneralException(Exception ex) {////        log.error("Unexpected error occurred: {}", ex.getMessage(), ex);////////        return ResponseEntity.ok(new ApiError(HttpStatus.INTERNAL_SERVER_ERROR, "An unexpected error occurred."));////    }//}