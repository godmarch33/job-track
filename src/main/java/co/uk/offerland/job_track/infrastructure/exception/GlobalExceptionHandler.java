package co.uk.offerland.job_track.infrastructure.exception;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.validation.FieldError;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseStatus;import org.springframework.web.bind.annotation.RestControllerAdvice;import org.springframework.web.server.ResponseStatusException;import java.util.Map;import java.util.stream.Collectors;import lombok.extern.slf4j.Slf4j;@Slf4j@RestControllerAdvicepublic class GlobalExceptionHandler {    @ExceptionHandler(UserNotFoundException.class)    @ResponseStatus(HttpStatus.NOT_FOUND)    public ApiError handleUserNotFoundException(UserNotFoundException ex) {        log.warn("User not found: {}", ex.getMessage());        return new ApiError(HttpStatus.NOT_FOUND, ex.getMessage());    }    @ExceptionHandler(InvalidPhaseException.class)    @ResponseStatus(HttpStatus.BAD_REQUEST)    public ApiError handleUserNotFoundException(InvalidPhaseException ex) {        log.warn("Available phase not available: {}", ex.getMessage());        return new ApiError(HttpStatus.BAD_REQUEST, ex.getMessage());    }    @ExceptionHandler(JobNotFoundException.class)    @ResponseStatus(HttpStatus.NOT_FOUND)    public ApiError handleJobNotFoundException(JobNotFoundException ex) {        log.warn("Job not found: {}", ex.getMessage());        return new ApiError(HttpStatus.NOT_FOUND, ex.getMessage());    }    @ExceptionHandler(JobPhaseNotFoundException.class)    @ResponseStatus(HttpStatus.NOT_FOUND)    public ApiError handleJobNotFoundException(JobPhaseNotFoundException ex) {        log.warn("Job phase not found: {}", ex.getMessage());        return new ApiError(HttpStatus.NOT_FOUND, ex.getMessage());    }    @ExceptionHandler(JobAlreadyExistsException.class)    @ResponseStatus(HttpStatus.BAD_REQUEST)    public ApiError handleJobNotFoundException(JobAlreadyExistsException ex) {        log.warn("Job already exists: {}", ex.getMessage());        return new ApiError(HttpStatus.NOT_FOUND, ex.getMessage());    }    @ResponseStatus(HttpStatus.BAD_REQUEST)    @ExceptionHandler(MethodArgumentNotValidException.class)    public ApiError handleValidationExceptions(MethodArgumentNotValidException ex) {        log.warn("Validation failed: {} errors", ex.getBindingResult().getFieldErrors().size());        log.warn("Validation exception", ex);        Map<String, String> errors = ex.getBindingResult().getFieldErrors().stream()            .collect(Collectors.toMap(                fieldError -> fieldError.getField(),                fieldError -> fieldError.getDefaultMessage(),                (existing, replacement) -> existing));        return new ApiError(HttpStatus.BAD_REQUEST, "Validation error", errors);    }    @ExceptionHandler(ResponseStatusException.class)    public ResponseEntity<ApiError> handleResponseStatusException(ResponseStatusException ex) {        log.warn("Handled HTTP exception: {} - {}", ex.getStatusCode(), ex.getReason());        return ResponseEntity            .status(ex.getStatusCode())            .body(new ApiError(HttpStatus.valueOf(ex.getStatusCode().value()), ex.getReason()));    }    @ExceptionHandler(Exception.class)    public ResponseEntity<ApiError> handleGeneralException(Exception ex) {        log.error("Unexpected error occurred: {}", ex.getMessage(), ex);        return ResponseEntity            .status(HttpStatus.INTERNAL_SERVER_ERROR)            .body(new ApiError(HttpStatus.INTERNAL_SERVER_ERROR, "An unexpected error occurred."));    }}